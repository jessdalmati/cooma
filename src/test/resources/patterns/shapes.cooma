fun (w : Writer) {
    type RGB = {r: Int, g: Int, b: Int}
    type HSB = {h: Int, s: Int, b: Int}

    type Colour = <rgb: RGB, hsb: HSB>

    type Rect = {x: Int, y: Int, w: Int, h: Int}
    type Circ = {x : Int, y : Int, r : Int}
    type Ellipse = {x: Int, y: Int, w : Int, h : Int}
    type Dot = {x: Int, y: Int}

    type Shape = <rect: Rect, ellipse: Ellipse, dot: Dot>

    def on () String = "*"
    def off() String = ""

    def con(a : String, b : String) String = Strings.concat(a, b)

    def repeat(s: String, i: Int) String = 
        Ints.lte(i, 0) match {
            case True(_) => ""
            case False(_) => con(s, repeat(s, Ints.sub(i,1)))
        }

    val emptyLine = con(repeat(" ", 79), "\n")

    def emptyLines(x : Int) String = repeat(emptyLine, x)

    // existing
    def renderShape(s: Shape) String =
        s match {
            case dot(pt)  =>  con(con(emptyLines(pt.y), repeat(" ", pt.x)), "*")
            case rect(details) =>  
                con(
                    con(
                        con(
                            con(
                                con(
                                    con(
                                        con(
                                            emptyLines(details.y), 
                                            repeat(" ", details.x)
                                        ), 
                                        repeat("*", details.w)
                                    ), 
                                    "\n"
                                ), 
                                repeat(
                                    con(
                                        con(
                                            con(
                                                repeat(" ", details.x), 
                                                "*"
                                            ), 
                                            repeat(" ", Ints.sub(details.w, 2)) 
                                        ), 
                                        "*\n"
                                    ), 
                                    Ints.sub(details.h, 2)
                                )
                            ), 
                            repeat(" ", details.x)
                        ), 
                        repeat("*", details.w)
                    ), 
                    "\n"
                )
            case ellipse(_) => "this is an ellipse right here yep"
        }

    // target
    //def renderShape(s: Shape) String =
    //    s match {
    //        case dot({x=x,y=y}) => Strings.concat(Strings.concat(repeat("\n", y), repeat(" ", x)), "*") 
    // I think it makes sense to allow dot({x,y}) as a shortcut where x and y are labels.
    //        case circ(details) => "circle"
    //        case rect(details) => "rectangle"
    //    }
    
    val out : String = con(con(renderShape(<dot = {x=8,y=8}>), "\n"), renderShape(<rect = {x = 0, y = 0, w = 5, h = 5}>))
    w.write(out)
}






