fun (w : Writer) {
    type RGB = {r: Int, g: Int, b: Int}
    type HSB = {h: Int, s: Int, b: Int}

    type Colour = <rgb: RGB, hsb: HSB>

    type Rect = {x: Int, y: Int, w: Int, h: Int}
    type Circ = {x : Int, y : Int, r : Int}
    type Ellipse = {x: Int, y: Int, w : Int, h : Int}
    type Dot = {x: Int, y: Int}

    type Shape = <rect: Rect, ellipse: Ellipse, dot: Dot>

    def on () String = "*"
    def off() String = ""

    def con(a : String, b : String) String = Strings.concat(a, b)

    def repeat(s: String, i: Int) String = 
        Ints.lte(i, 0) match {
            case True(_) => ""
            case False(_) => con(s, repeat(s, Ints.sub(i,1)))
        }

    val emptyLine = con(repeat(" ", 79), "\n")

    def emptyLines(x : Int) String = repeat(emptyLine, x)

    // existing
    def renderShape(s: Shape) String =
        s match {
            case dot(pt)  =>  con(con(emptyLines(pt.y), repeat(" ", pt.x)), "*")
            case rect(details) => renderRect(details)
            case ellipse(e) => renderEllipse(e)
        }

    def renderRect(r : Rect) String = 
        con(
            con(
                con(
                    con(
                        con(
                            con(
                                con(
                                    emptyLines(r.y), 
                                    repeat(" ", r.x)
                                ), 
                                repeat("*", r.w)
                            ), 
                            "\n"
                        ), 
                        repeat(
                            con(
                                con(
                                    con(
                                        repeat(" ", r.x), 
                                        "*"
                                    ), 
                                    repeat(" ", Ints.sub(r.w, 2)) 
                                ), 
                                "*\n"
                            ), 
                            Ints.sub(r.h, 2)
                        )
                    ), 
                    repeat(" ", r.x)
                ), 
                repeat("*", r.w)
            ), 
            "\n"
        )

    def renderEllipse(e : Ellipse) String = 
        con(
            con(
                con(
                    con(
                        con(
                            con(
                                con(
                                    emptyLines(e.y), 
                                    repeat(" ", Ints.add(e.x, 1))
                                ), 
                                repeat("*", Ints.sub(e.w, 1))
                            ), 
                            "\n"
                        ), 
                        repeat(
                            con(
                                con(
                                    con(
                                        repeat(" ", e.x), 
                                        "*"
                                    ), 
                                    repeat(" ", Ints.sub(e.w, 2)) 
                                ), 
                                "*\n"
                            ), 
                            Ints.sub(e.h, 2)
                        )
                    ), 
                    repeat(" ", Ints.add(e.x, 1))
                ), 
                repeat("*", Ints.sub(e.w, 1))
            ), 
            "\n"
        )

    // target
    //def renderShape(s: Shape) String =
    //    s match {
    //        case dot({x=x,y=y}) => Strings.concat(Strings.concat(repeat("\n", y), repeat(" ", x)), "*") 
    // I think it makes sense to allow dot({x,y}) as a shortcut where x and y are labels.
    //        case circ(details) => "circle"
    //        case rect(details) => "rectangle"
    //    }

    val rectangle : String = renderShape(<rect = {x = 0, y = 0, w = 5, h = 5}>)
    val ellipse : String = renderShape(<ellipse = {x = 0, y = 0, w = 8, h = 5}>)
    val dot : String = renderShape(<dot = {x = 8, y = 8}>)
    val nl : String = "\n"
    
    val out : String = con(con(con(con(dot, nl), rectangle), nl), ellipse)
    w.write(out)
}






